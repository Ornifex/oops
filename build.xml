<!--
    This program (working title: MAS Prover) is an automated tableaux prover
    for epistemic logic (S5n).
    Copyright (C) 2007  Elske van der Vaart and Gert van Valkenhoef

    This program is free software; you can redistribute it and/or modify it
    under the terms of the GNU General Public License version 2 as published
    by the Free Software Foundation.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License along
    with this program; if not, write to the Free Software Foundation, Inc.,
    51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
-->
<project name="MAS" default="dist" basedir="."
		xmlns:artifact="antlib:org.apache.maven.artifact.ant">

	<!-- set global properties for this build -->
	<property name="src" location="src"/>
	<property name="build" location="build"/>
	<property name="dist"  location="dist"/>
	<property name="docs" location="docs"/>
	<property name="test" location="test"/>
	<property name="resource" location="resource"/>
	<property name="parser" location="parser" />

	<artifact:pom id="oops.pom" file="pom.xml" />

	<artifact:dependencies filesetId="dep.fileset" pomRefId="oops.pom" />

	<property name="parser-jar" location="${parser}/oops-parser.jar" />

	<!-- global definition of the classpath -->
	<path id="project.class.path">
		<fileset refid="dep.fileset" />

		<pathelement location="${parser-jar}"/>
		<pathelement location="${build}"/>
		<pathelement path="${java.class.path}"/>
	</path>

	<path id="parser.class.path">
		<pathelement path="${java.class.path}"/>
	</path>

	<path id="sablecc.class.path">
		<pathelement path="${sablecc:sablecc:jar}"/>
		<pathelement path="${java.class.path}"/>
	</path>

	<taskdef name="sablecc" classname="org.sablecc.ant.taskdef.Sablecc"
			classpathref="sablecc.class.path">
	</taskdef>
	
	<target name="init">
		<!-- Create the time stamp -->
		<tstamp/>
		<!-- Create the build directory structure used by compile -->
		<mkdir dir="${build}"/>
		<mkdir dir="${test}"/>
	</target>

	<target name="init-grammar">
		<mkdir dir="${parser}/src"/>
		<mkdir dir="${parser}/build"/>
	</target>

	<target name="all" depends="test">
	</target>

	<target name="clean" depends="clean-oops">
		<delete dir="${build}" />
		<delete dir="${test}" />
	</target>

	<target name="dist-clean" depends="clean">
		<delete dir="${dist}" />
		<delete dir="${docs}" />
		<delete file="${parser-jar}" />
	</target>

	<!-- PROVER build targets here -->
	<target name="oops" depends="init,resource,oops-grammar">
	<!-- disabled because running sablecc ANNOYS ME 
	<target name="oops" depends="init,resource">
	-->
		<javac srcdir="${src}" destdir="${build}" includes="nl/rug/ai/mas/oops/**" debug="true" target="1.5" source="1.5" classpathref="project.class.path">
			<!-- <classpath path="${project.class.path}" /> -->
		</javac>
	</target>

	<target name="grammar-check">
		<!-- check whether update is needed -->
		<dependset>
			<srcfileset
				dir="${parser}/grammar" includes="*.sablecc" />
			<targetfilelist
				files="${parser-jar}" />
		</dependset>

		<condition property="rebuild-grammar">
			<not><available file="${parser-jar}" /></not>
		</condition>
	</target>

	<target name="oops-grammar"
			depends="init-grammar,grammar-check"
			if="rebuild-grammar">
		<!-- clean up generated sources & binaries -->
		<delete dir="${parser}/src/nl" />
		<delete dir="${parser}/build/nl" />

		<!-- generate parser source -->
		<sablecc src="${parser}/grammar/"
			includes="*.sablecc"
         		outputdirectory="${parser}/src/" />

		<!-- copy generated data files -->
		<copy todir="${parser}/build">
			<fileset dir="${parser}/src">
				<include name="**/*.dat"/>
				<include name="**/*.txt"/>
			</fileset>
		</copy>

		<!-- compile sources -->
		<javac srcdir="${parser}/src" destdir="${parser}/build"
			includes="nl/rug/ai/mas/oops/parser/**"
			debug="true"
			target="1.5" source="1.5"
			classpathref="parser.class.path" />

		<!-- create JAR -->
		<jar jarfile="${parser-jar}" basedir="${parser}/build" />
	</target>

	<target name="resource" depends="init">
		<copy todir="${build}">
			<fileset dir="${resource}" />
		</copy>
	</target>

	<!-- cleaning tasks in addition to removing ${build} -->
	<target name="clean-oops" depends="clean-oops-grammar" />
	<target name="clean-oops-grammar">
		<delete dir="${parser}/src/nl" />
	</target>

	<!-- create jar file -->
	<target name="dist" depends="oops">
		<!-- initialize -->
		<delete dir="${dist}"/>
		<mkdir dir="${dist}"/>
		<mkdir dir="${dist}/lib"/>

		<!-- copy dependencies -->
		<copy todir="${dist}" file="${parser-jar}" />
		<copy todir="${dist}/lib">
			<fileset refId="dep.fileset" />
			<mapper type="flatten" />
		</copy>

		<!-- generate classpath for MANIFEST -->
		<path id="dist.classpath">
			<fileset dir="${dist}" />
		</path>
		<pathconvert property="dist-classpath" pathsep=" ">
			<path refid="dist.classpath" />
			<map from="${dist}" to="." />
		</pathconvert>
		
		<!-- build jar -->
		<jar jarfile="${dist}/oops.jar" basedir="${build}">
			<manifest>
				<attribute name="Main-Class"
					value="nl.rug.ai.mas.oops.GUI" />
				<attribute name="Class-Path"
					value="${dist-classpath}" />
			</manifest>
		</jar>
	</target>

	<!-- build documentation -->
	<target name="docs">
		<mkdir dir="${docs}" />
		<javadoc sourcepath="${src}" access="private" destdir="${docs}" 
			packageNames="nl.rug.ai.mas.*"/>
	</target>

	<!-- run tests -->
	<target name="test" depends="init, dist">
		<junit showoutput="true">
			<classpath refid="project.class.path" />
			<formatter type="plain" />
			<batchtest todir="${test}">
				<fileset dir="${src}">
					<include name="nl/rug/ai/mas/**/test/*.java" />
				</fileset>
			</batchtest>
		</junit>
	</target>

	<!-- jung test -->
	<target name="jungtest" depends="oops">
		<java classpathref="project.class.path" classname="nl.rug.ai.mas.oops.JungTest" fork="true" />
	</target>
</project>
