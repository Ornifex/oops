<!--
    This program (working title: MAS Prover) is an automated tableaux prover
    for epistemic logic (S5n).
    Copyright (C) 2007  Elske van der Vaart and Gert van Valkenhoef

    This program is free software; you can redistribute it and/or modify it
    under the terms of the GNU General Public License version 2 as published
    by the Free Software Foundation.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License along
    with this program; if not, write to the Free Software Foundation, Inc.,
    51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
-->
<project name="MAS" default="dist" basedir=".">
	<!-- set global properties for this build -->
	<property name="src" location="src"/>
	<property name="build" location="build"/>
	<property name="dist"  location="dist"/>
	<property name="docs" location="docs"/>
	<property name="test" location="test"/>
	<property name="resource" location="resource"/>

	<!-- location of local packages -->
	<property name="local" location="lib" />

	<!-- dependencies for zest -->
	<property name="zest-layouts" location="${local}/org.eclipse.mylyn.zest.layouts_1.0.0.v20080226.jar" />
	<property name="batik" location="${local}/batik-1.7/lib/*.jar" /> <!-- FIXME: include batik-1.7/lib/*.jar -->
	<property name="jgrapht" location="${local}/jgrapht-jdk1.6.jar" />
	<property name="jgraph" location="${local}/jgraph.jar" />
	<property name="sablecc" location="${local}/sablecc.jar" />

	<!-- global definition of the classpath -->
	<path id="project.class.path">
		<fileset dir="${local}/batik-1.7/lib/" />
		<pathelement path="${batik}" />
		<pathelement path="${jgrapht}" />
		<pathelement path="${jgraph}" />

		<pathelement location="${build}"/>
		<pathelement path="${java.class.path}/"/>
	</path>

	<path id="sablecc.class.path">
		<pathelement path="${sablecc}"/>
		<pathelement path="${java.class.path}"/>
	</path>

	<taskdef name="sablecc" classname="org.sablecc.ant.taskdef.Sablecc" classpathref="sablecc.class.path">
	</taskdef>
	
	<target name="init">
		<!-- Create the time stamp -->
		<tstamp/>
		<!-- Create the build directory structure used by compile -->
		<mkdir dir="${build}"/>
		<mkdir dir="${test}"/>
	</target>

	<target name="all" depends="test">
	</target>

	<target name="clean" depends="clean-oops">
		<delete dir="${build}" />
		<delete dir="${test}" />
	</target>

	<target name="dist-clean" depends="clean">
		<delete dir="${dist}" />
		<delete dir="${docs}" />
	</target>

	<!-- PROVER build targets here -->
	<target name="oops" depends="oops-grammar">
	<!-- disabled because running sablecc ANNOYS ME 
	<target name="oops" depends="init,resource">
	-->
		<javac srcdir="${src}" destdir="${build}" includes="nl/rug/ai/mas/oops/**" debug="true" target="1.5" source="1.5" classpathref="project.class.path">
			<!-- <classpath path="${project.class.path}" /> -->
		</javac>
	</target>

	<target name="oops-grammar" depends="resource,clean-oops-grammar">
		<sablecc src="${src}/grammars/" includes="*.sablecc, *.grammar"
         outputdirectory="${src}"></sablecc>
		<copy todir="${build}">
		  <fileset dir="${src}">
			 <include name="**/*.dat"/>
			 <include name="**/*.txt"/>
		  </fileset>
		</copy>
	</target>

	<target name="resource" depends="init">
		<copy todir="${build}">
			<fileset dir="${resource}" />
		</copy>
	</target>

	<!-- cleaning tasks in addition to removing ${build} -->
	<target name="clean-oops" depends="clean-oops-grammar" />
	<target name="clean-oops-grammar">
		<delete dir="${src}/nl/rug/ai/mas/oops/parser/" />
	</target>

	<!-- create jar file -->
	<target name="dist" depends="oops">
		<mkdir dir="${dist}"/>
		<jar jarfile="${dist}/oops.jar" basedir="${build}" manifest="${src}/MANIFEST.MF" />
	</target>

	<!-- build documentation -->
	<target name="docs">
		<mkdir dir="${docs}" />
		<javadoc sourcepath="${src}" access="private" destdir="${docs}" 
			packageNames="nl.rug.ai.mas.*"/>
	</target>

	<!-- run tests -->
	<target name="test" depends="init, dist">
		<junit showoutput="true">
			<classpath>
				<pathelement location="${dist}/oops.jar" />
				<pathelement path="${java.class.path}" />
			</classpath>
			<formatter type="plain" />
			<batchtest todir="${test}">
				<fileset dir="${src}">
					<include name="nl/rug/ai/mas/**/test/*.java" />
				</fileset>
			</batchtest>
		</junit>
	</target>

	<!-- jung test -->
	<target name="jungtest" depends="oops">
		<java classpathref="project.class.path" classname="nl.rug.ai.mas.oops.JungTest" fork="true" />
	</target>
</project>
